#!/usr/bin/env python3
"""
Tests de gestion des cl√©s EBICS
Test la g√©n√©ration, sauvegarde et gestion des cl√©s RSA
"""

import frappe
import unittest
import os
import json
import base64
from datetime import datetime
from typing import Dict, Optional

class TestEBICSKeys(unittest.TestCase):
    """Tests de gestion des cl√©s EBICS"""
    
    @classmethod
    def setUpClass(cls):
        """Configuration initiale"""
        cls.connection_name = "Raiffeisen"
        cls.connection = frappe.get_doc("ebics Connection", cls.connection_name)
        
    def setUp(self):
        """Avant chaque test"""
        from erpnextswiss.erpnextswiss.ebics_api import EbicsNode
        self.client = EbicsNode(self.connection)
        
    def test_keys_file_exists(self):
        """Test 1: V√©rifier l'existence du fichier de cl√©s"""
        site_path = frappe.get_site_path()
        keys_file = os.path.join(
            site_path, "private", "files", "ebics_keys",
            self.connection_name, "keys.json"
        )
        
        self.assertTrue(os.path.exists(keys_file), 
                       f"Le fichier de cl√©s n'existe pas: {keys_file}")
                       
        # V√©rifier la taille
        size = os.path.getsize(keys_file)
        self.assertGreater(size, 100, "Le fichier de cl√©s est trop petit")
        
    def test_keys_file_format(self):
        """Test 2: V√©rifier le format du fichier de cl√©s"""
        site_path = frappe.get_site_path()
        keys_file = os.path.join(
            site_path, "private", "files", "ebics_keys",
            self.connection_name, "keys.json"
        )
        
        with open(keys_file, 'r') as f:
            content = f.read()
            
        # Le fichier doit √™tre du Base64 (format node-ebics-client)
        try:
            # Essayer de d√©coder en Base64
            decoded = base64.b64decode(content)
            self.assertGreater(len(decoded), 0, "Le contenu d√©cod√© est vide")
        except Exception as e:
            self.fail(f"Le fichier n'est pas en Base64 valide: {e}")
            
    def test_passphrase_masking(self):
        """Test 3: Test de la gestion du masquage du passphrase"""
        passphrase = self.client._get_passphrase()
        
        self.assertIsNotNone(passphrase)
        
        # Si c'est le masque, v√©rifier qu'on utilise la valeur par d√©faut
        if passphrase == "*******":
            print("‚ö†Ô∏è  Passphrase est le masque UI, utilise 'default'")
            # V√©rifier que la m√©thode retourne quand m√™me quelque chose
            self.assertTrue(len(passphrase) > 0)
            
    def test_key_types(self):
        """Test 4: V√©rifier les types de cl√©s EBICS"""
        # Les cl√©s EBICS standard
        key_types = ['A006', 'X002', 'E002']  # Signature, Auth, Encryption
        
        # node-ebics-client devrait g√©rer ces types
        for key_type in key_types:
            # On ne peut pas v√©rifier directement sans d√©crypter
            # mais on v√©rifie que le client les comprend
            self.assertIsNotNone(self.client)
            
    def test_bank_keys_storage(self):
        """Test 5: V√©rifier le stockage des cl√©s de la banque"""
        # Apr√®s HPB, les cl√©s de la banque devraient √™tre stock√©es
        # On ne peut pas les lire directement (chiffr√©es)
        # mais on peut v√©rifier que le client les g√®re
        
        # Ce test v√©rifie juste que la m√©thode existe
        self.assertTrue(hasattr(self.client, 'HPB'))
        
    def test_key_generation_function(self):
        """Test 6: V√©rifier que la fonction de g√©n√©ration existe"""
        from erpnextswiss.erpnextswiss.ebics_api import generate_new_keys
        
        self.assertTrue(callable(generate_new_keys))
        
    def test_keys_directory_permissions(self):
        """Test 7: V√©rifier les permissions du dossier de cl√©s"""
        site_path = frappe.get_site_path()
        keys_dir = os.path.join(
            site_path, "private", "files", "ebics_keys",
            self.connection_name
        )
        
        self.assertTrue(os.path.exists(keys_dir))
        
        # V√©rifier que le dossier est accessible en √©criture
        self.assertTrue(os.access(keys_dir, os.W_OK), 
                       "Le dossier de cl√©s n'est pas accessible en √©criture")
                       
    def test_backup_keys_exist(self):
        """Test 8: V√©rifier s'il y a des backups de cl√©s"""
        site_path = frappe.get_site_path()
        keys_dir = os.path.join(
            site_path, "private", "files", "ebics_keys",
            self.connection_name
        )
        
        # Lister les fichiers de backup
        backup_files = [f for f in os.listdir(keys_dir) 
                       if f.startswith('keys') and f.endswith('.backup')]
        
        if backup_files:
            print(f"üìÅ {len(backup_files)} fichier(s) de backup trouv√©(s)")
            for backup in backup_files:
                file_path = os.path.join(keys_dir, backup)
                size = os.path.getsize(file_path)
                print(f"  - {backup} ({size} bytes)")
                
    def test_key_encryption_strength(self):
        """Test 9: V√©rifier la force du chiffrement"""
        # node-ebics-client utilise AES-256-CBC
        # On v√©rifie juste que les cl√©s sont chiffr√©es
        
        site_path = frappe.get_site_path()
        keys_file = os.path.join(
            site_path, "private", "files", "ebics_keys",
            self.connection_name, "keys.json"
        )
        
        with open(keys_file, 'r') as f:
            content = f.read()
            
        # Ne doit pas contenir de texte en clair sensible
        sensitive_patterns = ['BEGIN RSA', 'PRIVATE KEY', 'privateKey']
        
        for pattern in sensitive_patterns:
            self.assertNotIn(pattern, content, 
                           f"Le fichier contient '{pattern}' en clair!")
                           
    def test_key_persistence(self):
        """Test 10: V√©rifier la persistance des cl√©s"""
        from erpnextswiss.erpnextswiss.ebics_api import EbicsNode
        
        # Cr√©er deux clients et v√©rifier qu'ils utilisent les m√™mes cl√©s
        client1 = EbicsNode(self.connection)
        client2 = EbicsNode(self.connection)
        
        # Les deux devraient pouvoir acc√©der aux cl√©s
        passphrase1 = client1._get_passphrase()
        passphrase2 = client2._get_passphrase()
        
        self.assertEqual(passphrase1, passphrase2, 
                        "Les passphrases devraient √™tre identiques")
        

def run_tests():
    """Ex√©cuter tous les tests de cl√©s"""
    loader = unittest.TestLoader()
    suite = loader.loadTestsFromTestCase(TestEBICSKeys)
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    return result.wasSuccessful()


if __name__ == "__main__":
    import sys
    sys.path.append('/home/neoffice/frappe-bench/sites')
    frappe.init(site='prod.local')
    frappe.connect()
    
    success = run_tests()
    
    frappe.destroy()
    sys.exit(0 if success else 1)