#!/usr/bin/env python3
"""
Tests d'initialisation EBICS
Test le workflow INI, HIA, HPB et activation
"""

import frappe
import unittest
import json
from datetime import datetime
from typing import Dict, Optional

class TestEBICSInitialization(unittest.TestCase):
    """Tests du workflow d'initialisation EBICS"""
    
    @classmethod
    def setUpClass(cls):
        """Configuration initiale"""
        cls.connection_name = "Raiffeisen"
        cls.connection = frappe.get_doc("ebics Connection", cls.connection_name)
        
    def setUp(self):
        """Avant chaque test"""
        from erpnextswiss.erpnextswiss.ebics_api import EbicsNode
        self.client = EbicsNode(self.connection)
        
    def test_ini_status(self):
        """Test 1: V√©rifier le statut INI"""
        ini_sent = self.connection.ini_sent
        
        if ini_sent:
            print("‚úÖ INI d√©j√† envoy√©")
        else:
            print("‚ö†Ô∏è  INI pas encore envoy√©")
            
        # Le champ doit exister
        self.assertIsNotNone(ini_sent)
        
    def test_hia_status(self):
        """Test 2: V√©rifier le statut HIA"""
        hia_sent = self.connection.hia_sent
        
        if hia_sent:
            print("‚úÖ HIA d√©j√† envoy√©")
        else:
            print("‚ö†Ô∏è  HIA pas encore envoy√©")
            
        self.assertIsNotNone(hia_sent)
        
    def test_bank_activation_status(self):
        """Test 3: V√©rifier le statut d'activation"""
        bank_activated = self.connection.bank_activated
        
        if bank_activated:
            print("‚úÖ Banque activ√©e")
        else:
            print("‚ö†Ô∏è  Banque pas encore activ√©e")
            
        self.assertIsNotNone(bank_activated)
        
    def test_ini_method(self):
        """Test 4: Test de la m√©thode INI (sans ex√©cuter si d√©j√† fait)"""
        if self.connection.ini_sent:
            print("‚ÑπÔ∏è  INI d√©j√† envoy√©, skip du test")
            self.skipTest("INI d√©j√† envoy√©")
            
        # Si pas encore envoy√©, on pourrait le tester
        # mais on ne le fait pas automatiquement
        self.assertTrue(hasattr(self.client, 'INI'))
        
    def test_hia_method(self):
        """Test 5: Test de la m√©thode HIA (sans ex√©cuter si d√©j√† fait)"""
        if self.connection.hia_sent:
            print("‚ÑπÔ∏è  HIA d√©j√† envoy√©, skip du test")
            self.skipTest("HIA d√©j√† envoy√©")
            
        self.assertTrue(hasattr(self.client, 'HIA'))
        
    def test_hpb_method(self):
        """Test 6: Test de la m√©thode HPB"""
        result = self.client.HPB()
        
        self.assertIsNotNone(result)
        self.assertIn('success', result)
        
        if result.get('success'):
            print("‚úÖ HPB ex√©cut√© avec succ√®s")
            
            # V√©rifier si les cl√©s de la banque sont re√ßues
            if 'output' in result:
                try:
                    output_str = str(result['output'])
                    json_start = output_str.find('{')
                    if json_start >= 0:
                        data = json.loads(output_str[json_start:])
                        
                        if data.get('bankKeysReceived'):
                            print("‚úÖ Cl√©s de la banque re√ßues et sauvegard√©es")
                            self.assertTrue(True)
                        else:
                            technical_code = data.get('data', {}).get('technicalCode')
                            if technical_code == '061001':
                                print("‚è≥ Code 061001: Banque pas encore activ√©e")
                            elif technical_code == '000000':
                                print("‚úÖ HPB r√©ussi avec code 000000")
                            else:
                                print(f"‚ö†Ô∏è  Code technique: {technical_code}")
                except Exception as e:
                    print(f"‚ö†Ô∏è  Impossible de parser la r√©ponse HPB: {e}")
        else:
            error = result.get('error', 'Erreur inconnue')
            print(f"‚ùå HPB √©chou√©: {error}")
            
            # Si c'est une erreur d'authentification, c'est normal
            if '061001' in str(error):
                print("‚ÑπÔ∏è  C'est normal si la banque n'a pas encore activ√©")
                
    def test_initialization_order(self):
        """Test 7: V√©rifier l'ordre d'initialisation"""
        # L'ordre correct est : G√©n√©ration cl√©s -> INI -> HIA -> HPB -> Activation
        
        # Si INI est envoy√©, les cl√©s doivent exister
        if self.connection.ini_sent:
            import os
            site_path = frappe.get_site_path()
            keys_file = os.path.join(
                site_path, "private", "files", "ebics_keys",
                self.connection_name, "keys.json"
            )
            self.assertTrue(os.path.exists(keys_file), 
                          "INI envoy√© mais pas de cl√©s!")
                          
        # Si HIA est envoy√©, INI doit l'√™tre aussi
        if self.connection.hia_sent:
            self.assertTrue(self.connection.ini_sent, 
                          "HIA envoy√© mais pas INI!")
                          
        # Si activ√©, INI et HIA doivent √™tre envoy√©s
        if self.connection.bank_activated:
            self.assertTrue(self.connection.ini_sent, 
                          "Activ√© mais INI pas envoy√©!")
            self.assertTrue(self.connection.hia_sent, 
                          "Activ√© mais HIA pas envoy√©!")
                          
    def test_ini_letter_generation(self):
        """Test 8: Test de g√©n√©ration de la lettre INI"""
        from erpnextswiss.erpnextswiss.ebics_api import generate_ini_letter_pdf
        
        self.assertTrue(callable(generate_ini_letter_pdf))
        
        # On ne g√©n√®re pas vraiment le PDF dans le test
        # mais on v√©rifie que la fonction existe
        
    def test_bank_technical_codes(self):
        """Test 9: Comprendre les codes techniques EBICS"""
        codes = {
            "000000": "Succ√®s",
            "061001": "Authentification √©chou√©e / Non activ√©",
            "061002": "Signature invalide", 
            "090003": "Utilisateur inconnu",
            "091001": "Type d'ordre inconnu",
            "091005": "Pas de donn√©es disponibles",
            "091116": "Ordre d√©j√† soumis"
        }
        
        # Juste v√©rifier qu'on conna√Æt les codes
        self.assertGreater(len(codes), 5)
        
        print(f"üìã {len(codes)} codes techniques connus")
        
    def test_workflow_completion(self):
        """Test 10: V√©rifier la compl√©tion du workflow"""
        steps = {
            "Cl√©s g√©n√©r√©es": self._check_keys_exist(),
            "INI envoy√©": self.connection.ini_sent,
            "HIA envoy√©": self.connection.hia_sent,
            "HPB ex√©cut√©": self._check_hpb_done(),
            "Banque activ√©e": self.connection.bank_activated
        }
        
        print("\nüìä √âtat du workflow d'initialisation:")
        for step, done in steps.items():
            status = "‚úÖ" if done else "‚è≥"
            print(f"  {status} {step}")
            
        # Calculer le pourcentage de compl√©tion
        completed = sum(1 for done in steps.values() if done)
        total = len(steps)
        percentage = (completed / total) * 100
        
        print(f"\nüìà Progression: {completed}/{total} ({percentage:.0f}%)")
        
        # Le test passe toujours, c'est juste informatif
        self.assertTrue(True)
        
    def _check_keys_exist(self):
        """Helper: V√©rifier que les cl√©s existent"""
        import os
        site_path = frappe.get_site_path()
        keys_file = os.path.join(
            site_path, "private", "files", "ebics_keys",
            self.connection_name, "keys.json"
        )
        return os.path.exists(keys_file)
        
    def _check_hpb_done(self):
        """Helper: V√©rifier si HPB a √©t√© fait (heuristique)"""
        # On ne peut pas savoir avec certitude sans flag d√©di√©
        # mais si la banque est activ√©e, HPB a forc√©ment √©t√© fait
        return self.connection.bank_activated
        

def run_tests():
    """Ex√©cuter tous les tests d'initialisation"""
    loader = unittest.TestLoader()
    suite = loader.loadTestsFromTestCase(TestEBICSInitialization)
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    return result.wasSuccessful()


if __name__ == "__main__":
    import sys
    sys.path.append('/home/neoffice/frappe-bench/sites')
    frappe.init(site='prod.local')
    frappe.connect()
    
    success = run_tests()
    
    frappe.destroy()
    sys.exit(0 if success else 1)