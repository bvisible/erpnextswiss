#!/usr/bin/env python3
"""
Tests de gestion des erreurs EBICS
Test tous les codes d'erreur et la r√©cup√©ration
"""

import frappe
import unittest
from datetime import datetime
import json
from typing import Dict, List

class TestEBICSErrorHandling(unittest.TestCase):
    """Tests de gestion des erreurs EBICS"""
    
    @classmethod
    def setUpClass(cls):
        """Configuration initiale"""
        cls.connection_name = "Raiffeisen"
        cls.connection = frappe.get_doc("ebics Connection", cls.connection_name)
        
        # Dictionnaire complet des codes d'erreur EBICS
        cls.error_codes = {
            # Codes de succ√®s
            "000000": "OK - Traitement r√©ussi",
            "011000": "OK - T√©l√©chargement positif",
            "011001": "OK - Segment t√©l√©charg√©",
            
            # Codes d'authentification
            "061001": "Authentification √©chou√©e",
            "061002": "Signature invalide",
            "061099": "Erreur d'authentification interne",
            
            # Codes utilisateur
            "090003": "Utilisateur inconnu",
            "090004": "Utilisateur invalide",
            "090005": "Utilisateur verrouill√©",
            "091002": "Utilisateur non autoris√©",
            
            # Codes de transaction
            "091001": "Type d'ordre inconnu",
            "091003": "Format de message non support√©",
            "091004": "Version non support√©e",
            "091005": "Pas de donn√©es disponibles",
            "091006": "T√©l√©chargement impossible",
            "091007": "Upload impossible",
            "091101": "TX segment non trouv√©",
            "091102": "Transaction invalide",
            "091103": "TX segment invalide",
            "091104": "TX segment d√©j√† existant",
            "091112": "Format de message invalide",
            "091113": "Fichier de format incoh√©rent",
            "091115": "Ordre en cours de traitement",
            "091116": "Ordre d√©j√† existant",
            "091117": "T√©l√©chargement en cours",
            "091118": "Aucun t√©l√©chargement en cours",
            "091119": "Reprise impossible",
            "091120": "Ordre annul√©",
            
            # Codes de s√©curit√©
            "091201": "Algorithme de signature non support√©",
            "091202": "Algorithme de chiffrement non support√©",
            "091203": "Cl√© publique inconnue",
            "091204": "Format de cl√© invalide",
            "091205": "Certificat invalide",
            "091206": "Certificat expir√©",
            "091207": "Certificat r√©voqu√©",
            "091208": "Certificat non encore valide",
            "091209": "Algorithme de hash non support√©",
            
            # Codes de compte
            "091301": "Compte bloqu√©",
            "091302": "Compte inconnu",
            "091303": "Limite d√©pass√©e",
            "091304": "Compte non autoris√©"
        }
        
    def setUp(self):
        """Avant chaque test"""
        from erpnextswiss.erpnextswiss.ebics_api import EbicsNode
        self.client = EbicsNode(self.connection)
        
    def test_error_code_dictionary(self):
        """Test 1: V√©rifier le dictionnaire des codes d'erreur"""
        self.assertGreater(len(self.error_codes), 30)
        print(f"üìã {len(self.error_codes)} codes d'erreur connus")
        
        # V√©rifier les codes critiques
        critical_codes = ["000000", "061001", "091005", "090003"]
        for code in critical_codes:
            self.assertIn(code, self.error_codes)
            
    def test_parse_error_from_response(self):
        """Test 2: Parser les codes d'erreur depuis les r√©ponses"""
        # Simuler diff√©rentes r√©ponses d'erreur
        test_responses = [
            {"technicalCode": "061001"},
            {"data": {"technicalCode": "091005"}},
            {"error": "Authentication failed", "code": "061001"},
            {"message": "No data available (091005)"}
        ]
        
        for response in test_responses:
            code = self._extract_error_code(response)
            if code:
                print(f"‚úÖ Code extrait: {code} - {self.error_codes.get(code, 'Inconnu')}")
                
    def test_authentication_errors(self):
        """Test 3: Test des erreurs d'authentification"""
        # Tester avec une mauvaise connexion devrait donner 061001
        to_date = datetime.now()
        from_date = to_date.add(days=-1)
        
        result = self.client.Z53(from_date, to_date, parsed=False)
        
        if not result.get('success'):
            error = str(result.get('error', ''))
            if '061001' in error:
                print("‚úÖ Erreur 061001 correctement d√©tect√©e")
                print("   -> Authentification √©chou√©e / Non activ√©")
                
    def test_no_data_error(self):
        """Test 4: Test de l'erreur 'pas de donn√©es'"""
        # Tester avec une date tr√®s ancienne
        from datetime import datetime, timedelta
        old_date = datetime.now() - timedelta(days=365*2)  # 2 ans
        
        result = self.client.Z53(old_date, old_date.add(days=1), parsed=False)
        
        if not result.get('success'):
            error = str(result.get('error', ''))
            if '091005' in error:
                print("‚úÖ Erreur 091005 correctement g√©r√©e")
                print("   -> Pas de donn√©es disponibles")
                
    def test_missing_keys_error(self):
        """Test 5: Test de l'erreur de cl√©s manquantes"""
        result = self.client.Z53(datetime.now().add(days=-1), datetime.now(), parsed=False)
        
        if not result.get('success'):
            error = str(result.get('error', ''))
            if 'Cannot read properties of null' in error:
                print("‚úÖ Erreur de cl√©s manquantes d√©tect√©e")
                print("   -> Les cl√©s de la banque doivent √™tre t√©l√©charg√©es (HPB)")
                
    def test_error_categories(self):
        """Test 6: Cat√©goriser les types d'erreurs"""
        categories = {
            "Succ√®s": [],
            "Authentification": [],
            "Utilisateur": [],
            "Transaction": [],
            "S√©curit√©": [],
            "Compte": [],
            "Autres": []
        }
        
        for code, desc in self.error_codes.items():
            if code.startswith("00") or code.startswith("01"):
                categories["Succ√®s"].append(code)
            elif code.startswith("061"):
                categories["Authentification"].append(code)
            elif code.startswith("090"):
                categories["Utilisateur"].append(code)
            elif code.startswith("0910") or code.startswith("0911"):
                categories["Transaction"].append(code)
            elif code.startswith("0912"):
                categories["S√©curit√©"].append(code)
            elif code.startswith("0913"):
                categories["Compte"].append(code)
            else:
                categories["Autres"].append(code)
                
        print("\nüìä Cat√©gories d'erreurs:")
        for cat, codes in categories.items():
            if codes:
                print(f"  {cat}: {len(codes)} codes")
                
    def test_error_recovery(self):
        """Test 7: Test de r√©cup√©ration apr√®s erreur"""
        # Strat√©gies de r√©cup√©ration par type d'erreur
        recovery_strategies = {
            "061001": "Attendre l'activation de la banque",
            "091005": "Normal - pas de donn√©es pour cette p√©riode",
            "091115": "R√©essayer plus tard",
            "091116": "Ordre d√©j√† soumis - ignorer",
            "091301": "Contacter la banque - compte bloqu√©",
            "090005": "Contacter la banque - utilisateur verrouill√©"
        }
        
        print("\nüîß Strat√©gies de r√©cup√©ration:")
        for code, strategy in recovery_strategies.items():
            desc = self.error_codes.get(code, "Inconnu")
            print(f"  {code} ({desc})")
            print(f"    -> {strategy}")
            
    def test_error_logging(self):
        """Test 8: V√©rifier que les erreurs sont logg√©es"""
        # Les erreurs devraient √™tre dans frappe.log
        # On v√©rifie juste que le m√©canisme existe
        
        import frappe
        
        # Simuler un log d'erreur
        frappe.log_error(
            title="EBICS Test Error",
            message="Test error logging for EBICS"
        )
        
        print("‚úÖ M√©canisme de logging disponible")
        
    def test_timeout_handling(self):
        """Test 9: Gestion des timeouts"""
        # node-ebics-client a un timeout configurable
        # On v√©rifie que notre client le g√®re
        
        # Un timeout devrait retourner une erreur sp√©cifique
        # mais on ne peut pas le tester sans vraiment timeout
        
        print("‚ÑπÔ∏è  Test de timeout - v√©rification manuelle requise")
        
    def test_critical_error_detection(self):
        """Test 10: D√©tecter les erreurs critiques"""
        critical_errors = {
            "061001": "Non activ√© - Action requise",
            "090005": "Utilisateur verrouill√© - CRITIQUE",
            "091301": "Compte bloqu√© - CRITIQUE",
            "091206": "Certificat expir√© - CRITIQUE",
            "091207": "Certificat r√©voqu√© - CRITIQUE"
        }
        
        print("\nüö® Erreurs critiques √† surveiller:")
        for code, impact in critical_errors.items():
            print(f"  {code}: {impact}")
            
        # Dans un vrai syst√®me, on devrait alerter sur ces erreurs
        self.assertTrue(len(critical_errors) > 0)
        
    def _extract_error_code(self, response: Dict) -> Optional[str]:
        """Helper pour extraire un code d'erreur d'une r√©ponse"""
        # Chercher dans diff√©rents endroits
        if isinstance(response, dict):
            # Direct
            if 'technicalCode' in response:
                return response['technicalCode']
            
            # Nested
            if 'data' in response and isinstance(response['data'], dict):
                if 'technicalCode' in response['data']:
                    return response['data']['technicalCode']
                    
            # Dans le message d'erreur
            if 'error' in response:
                error_str = str(response['error'])
                for code in self.error_codes.keys():
                    if code in error_str:
                        return code
                        
            if 'message' in response:
                msg = str(response['message'])
                for code in self.error_codes.keys():
                    if code in msg:
                        return code
                        
        return None
        

def run_tests():
    """Ex√©cuter tous les tests de gestion d'erreurs"""
    loader = unittest.TestLoader()
    suite = loader.loadTestsFromTestCase(TestEBICSErrorHandling)
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    return result.wasSuccessful()


if __name__ == "__main__":
    import sys
    sys.path.append('/home/neoffice/frappe-bench/sites')
    frappe.init(site='prod.local')
    frappe.connect()
    
    success = run_tests()
    
    frappe.destroy()
    sys.exit(0 if success else 1)