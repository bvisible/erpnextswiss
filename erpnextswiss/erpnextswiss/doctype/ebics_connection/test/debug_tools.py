#!/usr/bin/env python3
"""
Outils de d√©bogage pour EBICS
Fonctions utilitaires pour diagnostiquer les probl√®mes
"""

import frappe
import os
import json
import base64
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any

def get_ebics_state(connection_name: str = "Raiffeisen") -> Dict:
    """
    Obtenir l'√©tat complet d'une connexion EBICS
    
    Args:
        connection_name: Nom de la connexion EBICS
        
    Returns:
        Dict avec l'√©tat complet
    """
    try:
        conn = frappe.get_doc("ebics Connection", connection_name)
        
        state = {
            "connection": {
                "name": conn.name,
                "url": conn.url,
                "host_id": conn.host_id,
                "partner_id": conn.partner_id,
                "user_id": conn.user_id,
                "iban": getattr(conn, 'iban', None)
            },
            "status": {
                "ini_sent": conn.ini_sent,
                "hia_sent": conn.hia_sent,
                "bank_activated": conn.bank_activated
            },
            "keys": check_keys_status(connection_name),
            "last_errors": get_recent_errors(connection_name),
            "workflow_progress": calculate_workflow_progress(conn)
        }
        
        return state
        
    except Exception as e:
        return {"error": str(e)}


def check_keys_status(connection_name: str) -> Dict:
    """
    V√©rifier le statut des cl√©s
    
    Returns:
        Dict avec les infos sur les cl√©s
    """
    site_path = frappe.get_site_path()
    keys_dir = os.path.join(
        site_path, "private", "files", "ebics_keys", connection_name
    )
    keys_file = os.path.join(keys_dir, "keys.json")
    
    status = {
        "directory_exists": os.path.exists(keys_dir),
        "keys_file_exists": os.path.exists(keys_file),
        "keys_file_size": 0,
        "keys_file_modified": None,
        "backup_files": [],
        "passphrase_status": "unknown"
    }
    
    if os.path.exists(keys_file):
        status["keys_file_size"] = os.path.getsize(keys_file)
        status["keys_file_modified"] = datetime.fromtimestamp(
            os.path.getmtime(keys_file)
        ).strftime("%Y-%m-%d %H:%M:%S")
        
        # V√©rifier le format
        try:
            with open(keys_file, 'r') as f:
                content = f.read()
                # Essayer de d√©coder en Base64
                base64.b64decode(content)
                status["keys_format"] = "Base64 (node-ebics-client)"
        except:
            status["keys_format"] = "Format inconnu ou corrompu"
            
    # Lister les backups
    if os.path.exists(keys_dir):
        for file in os.listdir(keys_dir):
            if file.startswith('keys') and file != 'keys.json':
                file_path = os.path.join(keys_dir, file)
                size = os.path.getsize(file_path)
                modified = datetime.fromtimestamp(os.path.getmtime(file_path))
                status["backup_files"].append({
                    "name": file,
                    "size": size,
                    "modified": modified.strftime("%Y-%m-%d %H:%M:%S")
                })
                
    # V√©rifier le passphrase
    try:
        from erpnextswiss.erpnextswiss.ebics_api import EbicsNode
        conn = frappe.get_doc("ebics Connection", connection_name)
        client = EbicsNode(conn)
        passphrase = client._get_passphrase()
        
        if passphrase == "*******":
            status["passphrase_status"] = "UI mask (using default)"
        elif passphrase:
            status["passphrase_status"] = f"Set ({len(passphrase)} chars)"
        else:
            status["passphrase_status"] = "Empty"
    except:
        status["passphrase_status"] = "Error checking"
        
    return status


def analyze_error(error_code: str, connection_name: str = None) -> Dict:
    """
    Analyser un code d'erreur EBICS
    
    Args:
        error_code: Code d'erreur EBICS
        connection_name: Nom de la connexion (optionnel)
        
    Returns:
        Dict avec l'analyse
    """
    error_meanings = {
        "000000": {
            "meaning": "Succ√®s",
            "severity": "info",
            "action": "Aucune action requise"
        },
        "061001": {
            "meaning": "Authentification √©chou√©e / Non activ√©",
            "severity": "warning",
            "action": "Attendre l'activation de la banque ou v√©rifier les cl√©s"
        },
        "061002": {
            "meaning": "Signature invalide",
            "severity": "error",
            "action": "V√©rifier les cl√©s et r√©g√©n√©rer si n√©cessaire"
        },
        "090003": {
            "meaning": "Utilisateur inconnu",
            "severity": "error",
            "action": "V√©rifier l'User ID avec la banque"
        },
        "090005": {
            "meaning": "Utilisateur verrouill√©",
            "severity": "critical",
            "action": "Contacter la banque imm√©diatement"
        },
        "091001": {
            "meaning": "Type d'ordre inconnu",
            "severity": "error",
            "action": "V√©rifier le type d'ordre support√© par la banque"
        },
        "091005": {
            "meaning": "Pas de donn√©es disponibles",
            "severity": "info",
            "action": "Normal - aucune transaction pour cette p√©riode"
        },
        "091115": {
            "meaning": "Ordre en cours de traitement",
            "severity": "info",
            "action": "R√©essayer dans quelques minutes"
        },
        "091116": {
            "meaning": "Ordre d√©j√† existant",
            "severity": "warning",
            "action": "L'ordre a d√©j√† √©t√© soumis - v√©rifier l'historique"
        },
        "091301": {
            "meaning": "Compte bloqu√©",
            "severity": "critical",
            "action": "Contacter la banque - compte bancaire bloqu√©"
        }
    }
    
    analysis = error_meanings.get(error_code, {
        "meaning": "Code d'erreur inconnu",
        "severity": "unknown",
        "action": "Consulter la documentation EBICS"
    })
    
    analysis["code"] = error_code
    
    # Si une connexion est fournie, v√©rifier le contexte
    if connection_name:
        state = get_ebics_state(connection_name)
        
        # Recommandations sp√©cifiques bas√©es sur l'√©tat
        if error_code == "061001":
            if not state["status"]["ini_sent"]:
                analysis["specific_action"] = "Envoyer INI d'abord"
            elif not state["status"]["hia_sent"]:
                analysis["specific_action"] = "Envoyer HIA apr√®s INI"
            elif not state["status"]["bank_activated"]:
                analysis["specific_action"] = "Attendre l'activation de la banque"
            else:
                analysis["specific_action"] = "Ex√©cuter HPB pour r√©cup√©rer les cl√©s de la banque"
                
    return analysis


def dump_keys_info(connection_name: str, show_content: bool = False) -> None:
    """
    Afficher les informations sur les cl√©s (sans exposer les cl√©s)
    
    Args:
        connection_name: Nom de la connexion
        show_content: Si True, affiche un aper√ßu du contenu (dangereux!)
    """
    print(f"\nüîê Informations sur les cl√©s - {connection_name}")
    print("=" * 60)
    
    status = check_keys_status(connection_name)
    
    print(f"üìÅ Dossier existe: {status['directory_exists']}")
    print(f"üìÑ Fichier keys.json existe: {status['keys_file_exists']}")
    
    if status['keys_file_exists']:
        print(f"üìä Taille: {status['keys_file_size']} bytes")
        print(f"üìÖ Modifi√©: {status['keys_file_modified']}")
        print(f"üîß Format: {status.get('keys_format', 'Inconnu')}")
        
    print(f"üîë Passphrase: {status['passphrase_status']}")
    
    if status['backup_files']:
        print(f"\nüì¶ Fichiers de backup: {len(status['backup_files'])}")
        for backup in status['backup_files']:
            print(f"  - {backup['name']} ({backup['size']} bytes, {backup['modified']})")
            
    if show_content and status['keys_file_exists']:
        print("\n‚ö†Ô∏è  APER√áU DU CONTENU (SENSIBLE!):")
        site_path = frappe.get_site_path()
        keys_file = os.path.join(
            site_path, "private", "files", "ebics_keys", 
            connection_name, "keys.json"
        )
        
        with open(keys_file, 'r') as f:
            content = f.read()
            # Afficher seulement les 100 premiers caract√®res
            print(f"  D√©but: {content[:100]}...")
            print(f"  Fin: ...{content[-100:]}")


def test_command_execution(connection_name: str) -> Dict:
    """
    Tester l'ex√©cution d'une commande node-ebics-client
    
    Returns:
        Dict avec les r√©sultats du test
    """
    from erpnextswiss.erpnextswiss.ebics_api import EbicsNode
    import subprocess
    
    results = {
        "node_version": None,
        "npm_version": None,
        "node_ebics_installed": False,
        "command_test": None
    }
    
    # V√©rifier Node.js
    try:
        result = subprocess.run(['node', '--version'], 
                              capture_output=True, text=True)
        results["node_version"] = result.stdout.strip()
    except:
        results["node_version"] = "Not installed"
        
    # V√©rifier npm
    try:
        result = subprocess.run(['npm', '--version'], 
                              capture_output=True, text=True)
        results["npm_version"] = result.stdout.strip()
    except:
        results["npm_version"] = "Not installed"
        
    # V√©rifier node-ebics-client
    try:
        result = subprocess.run(
            ['npm', 'list', 'node-ebics-client'],
            capture_output=True, text=True,
            cwd='/Users/jeremy/Downloads/node-ebics-client-master'
        )
        if 'node-ebics-client' in result.stdout:
            results["node_ebics_installed"] = True
    except:
        pass
        
    # Tester une commande simple
    try:
        conn = frappe.get_doc("ebics Connection", connection_name)
        client = EbicsNode(conn)
        
        # Essayer d'appeler _run_node_command avec une commande simple
        results["command_test"] = "Client created successfully"
    except Exception as e:
        results["command_test"] = f"Error: {e}"
        
    return results


def get_recent_errors(connection_name: str, days: int = 7) -> List[Dict]:
    """
    Obtenir les erreurs r√©centes pour une connexion
    
    Args:
        connection_name: Nom de la connexion
        days: Nombre de jours √† regarder
        
    Returns:
        Liste des erreurs r√©centes
    """
    # Dans un vrai syst√®me, on lirait les logs
    # Ici on retourne un exemple
    return []


def calculate_workflow_progress(connection: Any) -> Dict:
    """
    Calculer la progression du workflow d'initialisation
    
    Args:
        connection: Document de connexion EBICS
        
    Returns:
        Dict avec la progression
    """
    steps = {
        "keys_generated": False,
        "ini_sent": connection.ini_sent,
        "hia_sent": connection.hia_sent,
        "hpb_done": False,
        "bank_activated": connection.bank_activated,
        "ready": False
    }
    
    # V√©rifier si les cl√©s existent
    site_path = frappe.get_site_path()
    keys_file = os.path.join(
        site_path, "private", "files", "ebics_keys",
        connection.name, "keys.json"
    )
    steps["keys_generated"] = os.path.exists(keys_file)
    
    # HPB est fait si la banque est activ√©e (heuristique)
    steps["hpb_done"] = connection.bank_activated
    
    # Pr√™t si tout est fait
    steps["ready"] = all([
        steps["keys_generated"],
        steps["ini_sent"],
        steps["hia_sent"],
        steps["bank_activated"]
    ])
    
    # Calculer le pourcentage
    completed = sum(1 for v in steps.values() if v)
    total = len(steps)
    percentage = (completed / total) * 100
    
    return {
        "steps": steps,
        "completed": completed,
        "total": total,
        "percentage": percentage,
        "status": "Ready" if steps["ready"] else "In Progress"
    }


def debug_current_state(connection_name: str = "Raiffeisen") -> None:
    """
    Afficher un debug complet de l'√©tat actuel
    
    Args:
        connection_name: Nom de la connexion
    """
    print("\n" + "=" * 60)
    print(f"üîç √âTAT DE D√âBOGAGE EBICS - {connection_name}")
    print("=" * 60)
    
    # √âtat g√©n√©ral
    state = get_ebics_state(connection_name)
    
    if "error" in state:
        print(f"‚ùå Erreur: {state['error']}")
        return
        
    # Connexion
    print("\nüì° CONNEXION:")
    for key, value in state["connection"].items():
        print(f"  {key}: {value}")
        
    # Statut
    print("\nüìä STATUT:")
    for key, value in state["status"].items():
        status_icon = "‚úÖ" if value else "‚è≥"
        print(f"  {status_icon} {key}: {value}")
        
    # Cl√©s
    print("\nüîê CL√âS:")
    keys = state["keys"]
    print(f"  Fichier existe: {keys['keys_file_exists']}")
    if keys['keys_file_exists']:
        print(f"  Taille: {keys['keys_file_size']} bytes")
        print(f"  Format: {keys.get('keys_format', 'Inconnu')}")
        print(f"  Passphrase: {keys['passphrase_status']}")
        
    # Progression
    print("\nüìà PROGRESSION:")
    progress = state["workflow_progress"]
    print(f"  √âtapes compl√©t√©es: {progress['completed']}/{progress['total']}")
    print(f"  Pourcentage: {progress['percentage']:.0f}%")
    print(f"  Statut: {progress['status']}")
    
    for step, done in progress["steps"].items():
        icon = "‚úÖ" if done else "‚è≥"
        print(f"    {icon} {step}")
        
    # Test de commande
    print("\n‚öôÔ∏è  ENVIRONNEMENT:")
    env = test_command_execution(connection_name)
    print(f"  Node.js: {env['node_version']}")
    print(f"  npm: {env['npm_version']}")
    print(f"  node-ebics-client: {'‚úÖ Install√©' if env['node_ebics_installed'] else '‚ùå Non install√©'}")
    
    print("\n" + "=" * 60)


if __name__ == "__main__":
    import sys
    
    # Permettre l'ex√©cution directe pour debug
    sys.path.append('/home/neoffice/frappe-bench/sites')
    frappe.init(site='prod.local')
    frappe.connect()
    
    # Debug complet par d√©faut
    debug_current_state()
    
    # Analyser une erreur sp√©cifique si fournie
    if len(sys.argv) > 1:
        error_code = sys.argv[1]
        print(f"\nüîç Analyse de l'erreur {error_code}:")
        analysis = analyze_error(error_code, "Raiffeisen")
        for key, value in analysis.items():
            print(f"  {key}: {value}")
    
    frappe.destroy()